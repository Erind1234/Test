using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using InApps.Models;
using System.Linq;

namespace InApps.Repository
{
    public class EmpRepository
    {

        private SqlConnection con;


        //To Handle connection related activities    
        private void connection()
        {
            string constr = ConfigurationManager.ConnectionStrings["FacilegalConn"].ToString();
            con = new SqlConnection(constr);

        }

        public bool SaveFiscalization(EmpModel emp)
        {
            connection();
            con.Open();

            SqlCommand com = new SqlCommand("AddNewFiscalizimDetails1", con);
            com.CommandType = CommandType.StoredProcedure;
            com.Parameters.AddWithValue("@REFCODE", emp.REFCODE);
            com.Parameters.AddWithValue("@DATTIMSEND", emp.DATTIMSEND);
            com.Parameters.AddWithValue("@BANKNIPT", emp.BANKNIPT);
            com.Parameters.AddWithValue("@PYMTORDNUM", emp.PYMTORDNUM);
            com.Parameters.AddWithValue("@PAYERNIPT", emp.PAYERNIPT);
            com.Parameters.AddWithValue("@EINFIC", emp.EINFIC);
            com.Parameters.AddWithValue("@PYMTDATTIM", emp.PYMTDATTIM);
            com.Parameters.AddWithValue("@PAIDAMT", emp.PAIDAMT);
            com.Parameters.AddWithValue("@OVERPAIDAMT", emp.OVERPAIDAMT);
            com.Parameters.AddWithValue("@PAIDCUR", emp.PAIDCUR);
            com.Parameters.AddWithValue("@TRANSACTIONCODE", emp.TRANSACTIONCODE);
            com.Parameters.AddWithValue("@PYMTTYPE", emp.PYMTTYPE);
            com.Parameters.AddWithValue("@PYMTSTATUS", emp.PYMTSTATUS);
            com.Parameters.AddWithValue("@CODE", emp.CODE);
            com.Parameters.AddWithValue("@MESSAGE", emp.MESSAGE);
            com.Parameters.AddWithValue("@USR", emp.USR);
            com.Parameters.AddWithValue("@SELLERNIPT", emp.SELLERNIPT);
            com.Parameters.AddWithValue("@INVOICEDATE", emp.INVOICEDATE);
            com.Parameters.AddWithValue("@IBANNR", emp.IBANNR);
            com.Parameters.AddWithValue("@SWIFTNR", emp.SWIFTNR);
            com.Parameters.AddWithValue("@BANKNAME", emp.BANKNAME);
            com.Parameters.AddWithValue("@QRCODEVAL", emp.QRCODEVAL);
            com.Parameters.AddWithValue("@NIVF", emp.NIVF);
            com.Parameters.AddWithValue("@STPROFILE", emp.STPROFILE);
            int newId = Convert.ToInt32(com.ExecuteScalar());
            int i = com.ExecuteNonQuery();
            con.Close();
            if (i >= 1)
            {

                return true;

            }
            else
            {

                return false;
            }


        }

        internal bool AddFiscalization(EmpModel emp)
        {
            throw new NotImplementedException();
        }
        //To Update Employee details    

       


        public bool UpdateFiscalization(EmpModel emp)
        {
            try
            {
                connection();
                con.Open();

                SqlCommand com = new SqlCommand("UpdateFiscalizationDetails", con);
                com.CommandType = CommandType.StoredProcedure;
                com.Parameters.AddWithValue("@REFCODE", emp.REFCODE);
                com.Parameters.AddWithValue("@DATTIMSEND", emp.DATTIMSEND);
                com.Parameters.AddWithValue("@BANKNIPT", emp.BANKNIPT);
                com.Parameters.AddWithValue("@PYMTORDNUM", emp.PYMTORDNUM);
                com.Parameters.AddWithValue("@PAYERNIPT", emp.PAYERNIPT);
                com.Parameters.AddWithValue("@EINFIC", emp.EINFIC);
                com.Parameters.AddWithValue("@PYMTDATTIM", emp.PYMTDATTIM);
                com.Parameters.AddWithValue("@PAIDAMT", emp.PAIDAMT);
                com.Parameters.AddWithValue("@OVERPAIDAMT", emp.OVERPAIDAMT);
                com.Parameters.AddWithValue("@PAIDCUR", emp.PAIDCUR);
                com.Parameters.AddWithValue("@TRANSACTIONCODE", emp.TRANSACTIONCODE);
                com.Parameters.AddWithValue("@PYMTTYPE", emp.PYMTTYPE);
                com.Parameters.AddWithValue("@PYMTSTATUS", emp.PYMTSTATUS);
                com.Parameters.AddWithValue("@CODE", emp.CODE);
                com.Parameters.AddWithValue("@MESSAGE", emp.MESSAGE);
                com.Parameters.AddWithValue("@USR", emp.USR);
                com.Parameters.AddWithValue("@SELLERNIPT", emp.SELLERNIPT);
                com.Parameters.AddWithValue("@INVOICEDATE", emp.INVOICEDATE);
                com.Parameters.AddWithValue("@IBANNR", emp.IBANNR);
                com.Parameters.AddWithValue("@SWIFTNR", emp.SWIFTNR);
                com.Parameters.AddWithValue("@BANKNAME", emp.BANKNAME);
                com.Parameters.AddWithValue("@QRCODEVAL", emp.QRCODEVAL);
                com.Parameters.AddWithValue("@NIVF", emp.NIVF);
                com.Parameters.AddWithValue("@STPROFILE", emp.STPROFILE);

                int i = com.ExecuteNonQuery();
                con.Close();
                if (i >= 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                // Handle the exception (log, throw, etc.)
                throw ex;
            }
        }
        public EmpModel GetEmpModelById(int ID)
        {
            try
            {
                connection();
                con.Open();

                SqlCommand com = new SqlCommand("GetEmpModelById", con);
                com.CommandType = CommandType.StoredProcedure;
                com.Parameters.AddWithValue("@ID", ID);

                using (SqlDataReader rdr = com.ExecuteReader())
                {
                    if (rdr.Read())
                    {
                        // Create and populate an EmpModel object based on the data from the database
                        EmpModel emp = new EmpModel
                        {
                            // Set properties based on column names from the database
                            ID = Convert.ToInt32(rdr["ID"]),
                            REFCODE = rdr["REFCODE"].ToString(),
                            DATTIMSEND = rdr["DATTIMSEND"].ToString(),
                            BANKNIPT = rdr["BANKNIPT"].ToString(),
                            PYMTORDNUM = rdr["PYMTORDNUM"].ToString(),
                            PAYERNIPT = rdr["PAYERNIPT"].ToString(),
                            EINFIC = rdr["EINFIC"].ToString(),
                            PYMTDATTIM = rdr["PYMTDATTIM"].ToString(),
                            PAIDAMT = rdr["PAIDAMT"].ToString(),
                            OVERPAIDAMT = rdr["OVERPAIDAMT"].ToString(),
                            PAIDCUR = rdr["PAIDCUR"].ToString(),
                            TRANSACTIONCODE = rdr["TRANSACTIONCODE"].ToString(),
                            PYMTTYPE = rdr["PYMTTYPE"].ToString(),
                            PYMTSTATUS = rdr["PYMTSTATUS"].ToString(),
                            CODE = rdr["CODE"].ToString(),
                            MESSAGE = rdr["MESSAGE"].ToString(),
                            USR = rdr["USR"].ToString(),
                            SELLERNIPT = rdr["SELLERNIPT"].ToString(),
                            INVOICEDATE = rdr["INVOICEDATE"].ToString(),
                            IBANNR = rdr["IBANNR"].ToString(),
                            SWIFTNR = rdr["SWIFTNR"].ToString(),
                            BANKNAME = rdr["BANKNAME"].ToString(),
                            QRCODEVAL = rdr["QRCODEVAL"].ToString(),
                            NIVF = rdr["NIVF"].ToString(),
                            STPROFILE = rdr["STPROFILE"].ToString()
                        };

                        return emp;
                    }
                }

                return null; // Return null if the record with the provided id was not found
            }
            catch (Exception ex)
            {
                // Handle the exception (log, throw, etc.)
                throw ex;
            }
            finally
            {
                con.Close();
            }
        }
        public bool DeleteFiscalization(int ID)
        {
            try
            {
                connection();
                con.Open();

                SqlCommand com = new SqlCommand("DeleteFiscalizationDetails", con);
                com.CommandType = CommandType.StoredProcedure;
                com.Parameters.AddWithValue("@ID", ID);

                int i = com.ExecuteNonQuery();
                con.Close();

                return i >= 1;
            }
            catch (Exception ex)
            {
                // Handle the exception (log, throw, etc.)
                throw ex;
            }
        }
    
}
}

