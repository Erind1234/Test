
THe model that has the logic of the program is  called EmpRepository and has the following code

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using InApps.Models;
using System.Linq;

namespace InApps.Repository
{
    public class EmpRepository
    {

        private SqlConnection con;
        //To Handle connection related activities    
        private void connection()
        {
            string constr = ConfigurationManager.ConnectionStrings["FacilegalConn"].ToString();
            con = new SqlConnection(constr);

        }

        //To Add Employee details    
        public bool SaveFiscalization(EmpModel emp)
        {
            connection();
             con.Open();

            SqlCommand com = new SqlCommand("AddNewFiscalizimDetails1", con);
            com.CommandType = CommandType.StoredProcedure;
            com.Parameters.AddWithValue("@REFCODE", emp.REFCODE);
            com.Parameters.AddWithValue("@DATTIMSEND", emp.DATTIMSEND);
             com.Parameters.AddWithValue("@BANKNIPT", emp.BANKNIPT);
            com.Parameters.AddWithValue("@PYMTORDNUM",emp.PYMTORDNUM);
            com.Parameters.AddWithValue("@PAYERNIPT", emp.PAYERNIPT);
            com.Parameters.AddWithValue("@EINFIC", emp.EINFIC);
            com.Parameters.AddWithValue("@PYMTDATTIM", emp.PYMTDATTIM);
            com.Parameters.AddWithValue("@PAIDAMT", emp.PAIDAMT);
            com.Parameters.AddWithValue("@OVERPAIDAMT", emp.OVERPAIDAMT);
            com.Parameters.AddWithValue("@PAIDCUR", emp.PAIDCUR);
            com.Parameters.AddWithValue("@TRANSACTIONCODE", emp.TRANSACTIONCODE);
            com.Parameters.AddWithValue("@PYMTTYPE", emp.PYMTTYPE);
            com.Parameters.AddWithValue("@PYMTSTATUS", emp.PYMTSTATUS);
            com.Parameters.AddWithValue("@CODE", emp.CODE);
            com.Parameters.AddWithValue("@MESSAGE", emp.MESSAGE);
            com.Parameters.AddWithValue("@USR", emp.USR);
            com.Parameters.AddWithValue("@SELLERNIPT", emp.SELLERNIPT);
            com.Parameters.AddWithValue("@INVOICEDATE", emp.INVOICEDATE);
            com.Parameters.AddWithValue("@IBANNR", emp.IBANNR);
            com.Parameters.AddWithValue("@SWIFTNR", emp.SWIFTNR);
            com.Parameters.AddWithValue("@BANKNAME", emp.BANKNAME);
            com.Parameters.AddWithValue("@QRCODEVAL", emp.QRCODEVAL);
            com.Parameters.AddWithValue("@STPROFILE", emp.STPROFILE);





          
            int i = com.ExecuteNonQuery();
            con.Close();
            if (i >= 1)
            {

                return true;

            }
            else
            {

                return false;
            }


        }
      
        public List<EmpModel> GetAllFiscalization()
        {
            connection();
            List<EmpModel> empList = new List<EmpModel>();

            SqlCommand com = new SqlCommand("GetFiscalizimi", con);
            com.CommandType = CommandType.StoredProcedure;
            SqlDataAdapter da = new SqlDataAdapter(com);
            DataTable dt = new DataTable();

            con.Open();
            da.Fill(dt);
            con.Close();

            foreach (DataRow dr in dt.Rows)
            {
                empList.Add(new EmpModel
                {
                    id = Convert.ToInt32(dr["Id"]),
                    REFCODE = Convert.ToString(dr["REFCODE"]),
                    // Populate the rest of the properties
                });
            }

            return empList;
        }

        public List<EmpModel> GetFiscalizationByREFCode(string refCode)
        {
            connection();
            List<EmpModel> empList = new List<EmpModel>();

            SqlCommand com = new SqlCommand("GetFiscalizimiByREFCode", con);
            com.CommandType = CommandType.StoredProcedure;
            com.Parameters.AddWithValue("@REFCode", refCode);
            SqlDataAdapter da = new SqlDataAdapter(com);
            DataTable dt = new DataTable();

            con.Open();
            da.Fill(dt);
            con.Close();

            foreach (DataRow dr in dt.Rows)
            {
                empList.Add(new EmpModel
                {
                    id = Convert.ToInt32(dr["Id"]),
                    REFCODE = Convert.ToString(dr["REFCODE"]),
                    // Populate the rest of the properties
                });
            }

            return empList;
        }


        internal bool AddFiscalization(EmpModel emp)
        {
            throw new NotImplementedException();
        }

        //To Update Employee details    
        public bool UpdateFiscalization(EmpModel obj)
        {

            connection();
            SqlCommand com = new SqlCommand("UpdateFiscalizationDetails", con);

            com.CommandType = CommandType.StoredProcedure;
            com.Parameters.AddWithValue("@Id", obj.id);
            com.Parameters.AddWithValue("@REFCODE", obj.REFCODE);
            com.Parameters.AddWithValue("@DATTIMSEND", obj.DATTIMSEND);
            com.Parameters.AddWithValue("@BANKNIPT", obj.BANKNIPT);
            com.Parameters.AddWithValue("@PYMTORDNUM", obj.PYMTORDNUM);
            com.Parameters.AddWithValue("@PAYERNIPT", obj.PAYERNIPT);
            com.Parameters.AddWithValue("@EINFIC", obj.EINFIC);
            com.Parameters.AddWithValue("@PYMTDATTIM", obj.PYMTDATTIM);
            com.Parameters.AddWithValue("@PAIDAMT", obj.PAIDAMT);
            com.Parameters.AddWithValue("@OVERPAIDAMT", obj.OVERPAIDAMT);
            com.Parameters.AddWithValue("@PAIDCUR", obj.PAIDCUR);
            com.Parameters.AddWithValue("@TRANSACTIONCODE", obj.TRANSACTIONCODE);
            com.Parameters.AddWithValue("@PYMTTYPE", obj.PYMTTYPE);
            com.Parameters.AddWithValue("@PYMTSTATUS", obj.PYMTSTATUS);
            com.Parameters.AddWithValue("@CODE", obj.CODE);
            com.Parameters.AddWithValue("@MESSAGE", obj.MESSAGE);
            com.Parameters.AddWithValue("@USR", obj.USR);
            com.Parameters.AddWithValue("@SELLERNIPT", obj.SELLERNIPT);
            com.Parameters.AddWithValue("@INVOICEDATE", obj.INVOICEDATE);
            com.Parameters.AddWithValue("@IBANNR", obj.IBANNR);
            com.Parameters.AddWithValue("@SWIFTNR", obj.SWIFTNR);
            com.Parameters.AddWithValue("@BANKNAME", obj.BANKNAME);
            com.Parameters.AddWithValue("@QRCODEVAL", obj.QRCODEVAL);
            com.Parameters.AddWithValue("@STPROFILE", obj.STPROFILE);


            con.Open();
            int i = com.ExecuteNonQuery();
            con.Close();
            if (i >= 1)
            {

                return true;
            }
            else
            {
                return false;
            }
        }
        //To delete Employee details    
        public bool DeleteFiscalization(int Id)
        {

            connection();
            SqlCommand com = new SqlCommand("DeleteFiscalizationById", con);

            com.CommandType = CommandType.StoredProcedure;
            com.Parameters.AddWithValue("@Id", Id);

            con.Open();
            int i = com.ExecuteNonQuery();
            con.Close();
            if (i >= 1)
            {
                return true;
            }
            else
            {

                return false;
            }
        }
    }
}



the controller has the code as above 



using InApps.Models;
using System;
using System.Web.Mvc;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections.Generic;
using System.Data;

using static InApps.Models.Fiscal;
using static InApps.Models.FiscalLog;

using System.Linq;
using System.Collections;
using InApps.Repository;

namespace InApps.Controllers
{


    public class FiscalizationController : Controller
    {

        private EmpRepository empRepo;

        public FiscalizationController()
        {
            empRepo = new EmpRepository();
        }


        public ActionResult Index()
        {
            return View();

        }

        private const string connectionString = "FacilegalConn";
        [HttpGet]
        public ActionResult AddFiscalization()
        {
            return View();
        }


        [HttpPost]
        public ActionResult Index(string searchBox)
        {
            try
            {
                string[] splitValues = searchBox.Split(';');

                // Assign split values to ViewBag variables
                ViewBag.p1 = splitValues.Length > 0 ? splitValues[0] : string.Empty;
                ViewBag.p2 = splitValues.Length > 1 ? splitValues[1] : string.Empty;
                ViewBag.p3 = splitValues.Length > 2 ? splitValues[2] : string.Empty;
                ViewBag.p4 = splitValues.Length > 3 ? splitValues[3] : string.Empty;
                ViewBag.p5 = splitValues.Length > 4 ? splitValues[4] : string.Empty;
                ViewBag.p6 = splitValues.Length > 5 ? splitValues[5] : string.Empty;
                ViewBag.p7 = splitValues.Length > 6 ? splitValues[6] : string.Empty;
                ViewBag.p8 = splitValues.Length > 7 ? splitValues[7] : string.Empty;
                ViewBag.p9 = splitValues.Length > 8 ? splitValues[8] : string.Empty;
                ViewBag.p10 = splitValues.Length >9 ? splitValues[9] : string.Empty;
              
                return View("");
            }
            catch (Exception ex)
            {
                ViewBag.Error = "An error occurred: " + ex.Message;
                return View();
            }
        }

        [HttpPost]
        public ActionResult SaveFiscalization(string QRCODEVAL, string STPROFILE, string REFCODE,string PYMTORDNUM, string PAYERNIPT, string EINFIC, string PAIDAMT,string PAIDCUR,string TRANSACTIONCODE, string PYMTTYPE,string BANKNAME)
        {
            

            try
            {
                EmpModel emp = new EmpModel();
                emp.QRCODEVAL = "3";
                emp.STPROFILE = "2";

                emp.REFCODE = REFCODE;
                emp.PYMTORDNUM = PYMTORDNUM;
                emp.PAYERNIPT = PAYERNIPT;
                emp.EINFIC = "EINFIC";
                emp.PAIDAMT = PAIDAMT;
                emp.PAIDCUR = PAIDCUR;
                emp.TRANSACTIONCODE = TRANSACTIONCODE;
                emp.PYMTTYPE = "PYMTTYPE";

                emp.BANKNIPT = "2";

                emp.DATTIMSEND = "2";
                emp.PYMTDATTIM = "3";
                emp.OVERPAIDAMT = "4";
                emp.PYMTSTATUS = "5";
                emp.CODE = "6";
                emp.MESSAGE = "7";
                emp.USR = "98";
                emp.SELLERNIPT = "6";
                emp.INVOICEDATE = "65555";
                emp.IBANNR = "5";
                emp.SWIFTNR = "5";
                emp.BANKNAME = BANKNAME;
               




                bool isAdded = empRepo.SaveFiscalization(emp);

                if (isAdded)
                {
                    ViewBag.Message = "Fiscalization details saved successfully";
                }
                else
                {
                    ViewBag.Message = "Failed to save fiscalization details";
                }

                return View("AddFiscalization");
            }
            catch (Exception ex)
            {
                ViewBag.Error = "An error occurred: " + ex.Message;
                return View("AddFiscalization");
            }
        }
 
    // GET: Employee/GetAllEmpDetails    
    public ActionResult GetAllFiscalizationDetails()
            {

                EmpRepository EmpRepo = new EmpRepository();
                ModelState.Clear();
                return View(EmpRepo.GetAllFiscalization());
            }
            
        // GET: Employee/EditEmpDetails/5    
        public ActionResult EditFiscalizationDetails(int id)
            {
                EmpRepository EmpRepo = new EmpRepository();



                return View(EmpRepo.GetAllFiscalization().Find(Emp => Emp.id == id));

            }

            // POST: Employee/EditEmpDetails/5    
            [HttpPost]

            public ActionResult UpdateFiscalization(int id, EmpModel obj)
            {
                try
                {
                    EmpRepository EmpRepo = new EmpRepository();

                    EmpRepo.UpdateFiscalization(obj);




                    return RedirectToAction("GetAllFiscalizationDetails");
                }
                catch
                {
                    return View();
                }
            }

            // GET: Employee/DeleteEmp/5    
            public ActionResult DeleteFiscalization(int id)
            {
                try
                {
                    EmpRepository EmpRepo = new EmpRepository();
                    if (EmpRepo.DeleteFiscalization(id))
                    {
                        ViewBag.AlertMsg = "Employee details deleted successfully";

                    }
                    return RedirectToAction("GetAllFiscalizationDetails");

                }
                catch
                {
                    return View();
                }
            }


        }
    }


And the index or the html page that in my case i called Index has the html code for the interface of the program 


 <h2>Add Fiscalization</h2>

    @using (Html.BeginForm("Index", "Fiscalization", FormMethod.Post))
    {

        <div>
            <label>Search Box:</label>
            <input type="text" name="searchBox" value="" />
            <input type="submit" value="Split" />
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewBag.p1))
    {
        using (Html.BeginForm("SaveFiscalization", "Fiscalization", FormMethod.Post))
        {


            <div style="display: flex; justify-content: center; align-items: center; height: 50vh;">

                <div style="text-align: center; background-color: #e7e7ff;">
                    <table>
                        <tr>
                            <td>&nbsp;</td>

                        </tr>
                        <tr>
                            <td>&nbsp;</td>

                        </tr>

                        <tr>
                            <td>@Html.Label("Numri Urdhrit")</td>
                            <td>@Html.TextBox("PYMTORDNUM")</td>
                            <td>@Html.Label("Invoice Date:")</td>
                            <td>@Html.TextBoxFor(model => model.INVOICEDATE, new { @Value = ViewBag.p4 })</td>
                        </tr>

                        <tr>
                            <td>@Html.LabelFor(model => model.NIVF)</td>
                            <td>@Html.TextBoxFor(model => model.NIVF, new { @Value = ViewBag.p3, style = "width:400px;" })</td>

                        </tr>


                        <tr>
                            <td>@Html.Label("NIPT Bleres:")</td>
                            <td>@Html.TextBox("PAYERNIPT")</td>
                            <td>@Html.LabelFor(model => model.SELLERNIPT)</td>
                            <td>@Html.TextBoxFor(model => model.SELLERNIPT, new { @Value = ViewBag.p1 })</td>
                        </tr>
                        <tr>
                            <td>@Html.Label("Emri Shites")</td>
                            <td>@Html.TextBoxFor(model => model.TRANSACTIONCODE, new { @Value = ViewBag.p2, style = "width:400px;" })</td>
                        </tr>


                        <tr>
                            <td>@Html.Label("Referenca e Teller:")</td>
                            <td>@Html.TextBox("REFCODE")</td>
                        </tr>






                        <tr>
                            <td>@Html.Label("Tipi i Pageses:")</td>
                            <td>
                                @Html.DropDownListFor(model => model.PYMTTYPE, new SelectList(new[]
                                {
                                    new { Value = "CASH", Text = "CASH" },
                                    new { Value = "NON_CASH", Text = "NON_CASH" }
                                }, "Value", "Text"), "CASH")
                            </td>

                        </tr>
                        <tr>
                            <td>@Html.Label("Statusi i Pageses:")</td>

                            <td>
                                @Html.DropDownListFor(model => model.PYMTSTATUS, new SelectList(new[]
                                {
                                    new { Value = "P1 Faturimi i dergesave te mallrave dhe sherbimeve kundrejt porosive te blerjes,bazuar ne  kontrate", Text = "P1 Faturimi i dergesave te mallrave dhe sherbimeve kundrejt porosive te blerjes,bazuar ne  kontrate" },
                                    new { Value = "P2 Faturimi i dergesave te mallrave dhe sherbimeve bazuar ne nje kontrate", Text = "P2 Faturimi i dergesave te mallrave dhe sherbimeve bazuar ne nje kontrate" },
                                    new { Value = "P3 Faturimi i dorezimit te porosise se blerjes se  rastesishme", Text = "P3 Faturimi i dorezimit te porosise se blerjes se  rastesishme" },
                                    new { Value = "P4 Pagesa paraprake", Text = "P4 Pagesa paraprake" },
                                    new { Value = "P5 Pagesa ne vend", Text = "P5 Pagesa ne vend" },
                                    new { Value = "P6 Pagesa para dorezimit", Text = "P6 Pagesa para dorezimit" },
                                    new { Value = "P7 Faturat me referenca ne shenimin e dergimit", Text = "P7 Faturat me referenca ne shenimin e dergimit" },
                                    new { Value = "P8 Faturat me referenca ne shenimin e dergimit dhe shenimin e marrjes", Text = "P8 Faturat me referenca ne shenimin e dergimit dhe shenimin e marrjes" },
                                    new { Value = "P9 Note kredie ose fatura me shuma negative, te leshuara per nje sere arsyesh,perfshire kthimin e", Text = "P9 Note kredie ose fatura me shuma negative, te leshuara per nje sere arsyesh,perfshire kthimin e" },

                                    new { Value = "P10 Faturimi korrigjues(anullimi/korrigjimi i nje  fature)", Text = "P10 Faturimi korrigjues(anullimi/korrigjimi i nje  fature)" },
                                    new { Value = "P11 Faturimi i pjesshem dhe perfundimtar", Text = "P11 Faturimi i pjesshem dhe perfundimtar" },

                                }, "Value", "Text"), "P1 Faturimi i dergesave te mallrave dhe sherbimeve kundrejt porosive te blerjes,bazuar ne  kontrate")
                            </td>
                        </tr>



                        <tr>
                            <td>@Html.Label("Monedha:")</td>
                            <td>@Html.TextBoxFor(model => model.PAIDCUR, new { @Value = ViewBag.p7 })</td>
                        </tr>

                        <tr>
                            <td>@Html.Label("Shuma e Paguar:")</td>
                            <td>@Html.TextBoxFor(model => model.PAIDAMT, new { @Value = ViewBag.p6 })</td>
                        </tr>


                        <tr>
                            <td>@Html.Label("IBAN & SWIFT:")</td>
                            <td>@Html.TextBoxFor(model => model.IBANNR, new { @Value = ViewBag.p8 })</td>
                            <td>@Html.TextBoxFor(model => model.BANKNAME, new { @Value = ViewBag.p10 })</td>
                        </tr>


                        <tr>
                            <td>&nbsp;</td>

                        </tr>
                        <tr>
                            <td>&nbsp;</td>

                        </tr>

                    </table>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Ruaj" class="btn btn-default" />



                            <input type="submit" value="Fshi" class="btn btn-default" />

                            <input type="submit" value="Skanim i Ri" class="btn btn-default" />
                        </div>
                    </div>



                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10" style="color:green">
                    @ViewBag.Message
                </div>
            </div>
        }

    }
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


</div>
